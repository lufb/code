/**
* include/poise.h
*
*	均衡算法的头文件
*
*	2012-09-20 - 首次创建
*		            LUFUBO
*/

#ifndef __POISE_HEADER__
#define __POISE_HEADER__

#include "list.h"
#include "lock.h"
#include "structure.h"

#define	MAX_PKG_BODY_SIZE		8000	/*	一个数据包的(包体)最大字节数*/
#define POISE_NAME				"消息盒均衡服务器"


/*****************************************************************
*	函数名：instance
*	描述：均衡服务器的初始化
*	参数：
*			@usMaxLink：平台允许连接的最大连接数（用于创建多少个服务器数组）
*			
*	返回：
*			0	成功
*			!0	失败
******************************************************************/
int instance(unsigned short usMaxLink);

/*****************************************************************
*	函数名：createRand
*	描述：返回一个处于(min, max]之间的随机数（整数）
*	参数：
*			@min：最小值（包括）
*			@max：最大值（不包括）
*	返回：处于(min, max]之间的随机数（整数）
*
*****************************************************************/
static int createRand(int min, int max);

/*****************************************************************
*	函数名：addToAgentLink
*	描述：将代理服务器信息放入代理服务器链表中
*	参数：
*			@usRoomNo：该代理服务器所在机房的编号
*			@link_no：平台分配给该代理服务器的链路号
*					
*	返回：
*			0	成功
*			!0	失败
******************************************************************/
int addToAgentLink(const unsigned short usRoomNo, const unsigned int link_no);

/***************************************************************************
*	函数名：addToUpdateLink
*	描述：将升级服务器信息放入升级服务器链表中
*	参数：
*			@usRoomNo：该升级服务器所在机房的编号
*			@link_no：平台分配给该升级服务器的链路号
*					
*	返回：
*			0	成功
*			!0	失败
******************************************************************************/
int addToUpdateLink(const unsigned short usRoomNo, const unsigned int link_no);

int updateAgentList(short sRoomNo);

int updateUpdateList(short sRoomNo);

/******************************************************************************************
*	函数名：	selectOneRandomMachine
*	描述：		按概率大小从某个机房号中的机器中随机选一个可用服务器
*	参数：
*				@machineSum：该机房号中机器的总数
*				@uiBalanceSum：该机房中所有机器的均衡值总数
*				@roomListHead：链接该机房号中机器的链表头
*				@uiLinkNo：*uiLinkNo用来存储按概率大小选到的机器所在服务器数组中的下标
*					
*	返回：
*				0	按概率大小随机选取机器成功
*				1	失败
*				*uiLinkNo	如果成功，*uiLinkNo用来存储按概率大小选到的机器所在服务器数组中的下标
*******************************************************************************************/
int selectOneRandomMachine(int machineSum, unsigned long uiBalanceSum, struct list_head *roomListHead, unsigned int *uiLinkNo);

/******************************************************************************************
*	函数名：	delUpdate
*	描述：		处理升级注销，即将该升级服务器从升级服务器链表中踢出
*	参数：
*				@msg_hdr：	平台传来消息头
*				@iNo:		传入的升级服务器编号(如果传入-1，表示没有发注销协议而注销)
*					
*	返回：
*				0	成功
*				!0	失败
*				
*******************************************************************************************/
int delUpdate(const struct msg_header *msg_hdr, int iNo);

/******************************************************************************************
*	函数名：	delAgent
*	描述：		处理代理注销，即将该代理服务器从代理服务器链表中踢出
*	参数：
*				@msg_hdr：	平台传来消息头
*				@iNo:		传入的代理服务器编号(如果传入-1，表示没有发注销协议而注销)
*					
*	返回：
*				0	成功
*				!0	失败
*				
*******************************************************************************************/
int delAgent(const struct msg_header *msg_hdr, int iNo);

int installLinkMsg();

int installDataMsg();

#ifdef _DEBUG
/******************************************************************************************
*	函数名：	printData
*	描述：		调试模式下用于打印信息（协议处理过后的信息）到文件
*	参数：
*				@main：平台消息头中主协议
*				@child：平台消息头中子协议
*				@LinkNo：平台消息头中link_no
*	返回：
*				无
*	特殊提示：	为便于查看结果，应在锁锁住的情况下调用printData，以免没加锁情况下，引起错乱
*							
*******************************************************************************************/
void printData(unsigned char  main, unsigned char child, unsigned int LinkNo);

/******************************************************************************************
*	函数名：	printClient
*	描述：		调试模式下用于打印信息（客户端请求到的信息）到文件
*	参数：
*				@Buffer：	指向发送给客户端信息的起始点
*				@iSize：	信息大小
*	返回：
*				无
*	特殊提示：	为便于查看结果，应在锁锁住的情况下调用printClient，以免没加锁情况下，引起错乱
*							
*******************************************************************************************/
void printClient(char *Buffer, int iSize);
#endif


#endif